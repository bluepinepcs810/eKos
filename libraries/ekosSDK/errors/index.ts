/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * EscrowAlreadyClaimable: 'Escrow is already claimable'
 *
 * @category Errors
 * @category generated
 */
export class EscrowAlreadyClaimableError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'EscrowAlreadyClaimable'
  constructor() {
    super('Escrow is already claimable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowAlreadyClaimableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new EscrowAlreadyClaimableError())
createErrorFromNameLookup.set(
  'EscrowAlreadyClaimable',
  () => new EscrowAlreadyClaimableError()
)

/**
 * EscrowAlreadyUnclaimable: 'Escrow is already unclaimable'
 *
 * @category Errors
 * @category generated
 */
export class EscrowAlreadyUnclaimableError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'EscrowAlreadyUnclaimable'
  constructor() {
    super('Escrow is already unclaimable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowAlreadyUnclaimableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new EscrowAlreadyUnclaimableError())
createErrorFromNameLookup.set(
  'EscrowAlreadyUnclaimable',
  () => new EscrowAlreadyUnclaimableError()
)

/**
 * EscrowAlreadyWithdrawable: 'Escrow is already withdrawable'
 *
 * @category Errors
 * @category generated
 */
export class EscrowAlreadyWithdrawableError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'EscrowAlreadyWithdrawable'
  constructor() {
    super('Escrow is already withdrawable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowAlreadyWithdrawableError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new EscrowAlreadyWithdrawableError()
)
createErrorFromNameLookup.set(
  'EscrowAlreadyWithdrawable',
  () => new EscrowAlreadyWithdrawableError()
)

/**
 * EscrowAlreadyNonWithdrawable: 'Escrow is already non-withdrawable'
 *
 * @category Errors
 * @category generated
 */
export class EscrowAlreadyNonWithdrawableError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'EscrowAlreadyNonWithdrawable'
  constructor() {
    super('Escrow is already non-withdrawable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowAlreadyNonWithdrawableError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new EscrowAlreadyNonWithdrawableError()
)
createErrorFromNameLookup.set(
  'EscrowAlreadyNonWithdrawable',
  () => new EscrowAlreadyNonWithdrawableError()
)

/**
 * EscrowIsNotClaimable: 'Escrow is not able to claim'
 *
 * @category Errors
 * @category generated
 */
export class EscrowIsNotClaimableError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'EscrowIsNotClaimable'
  constructor() {
    super('Escrow is not able to claim')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowIsNotClaimableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new EscrowIsNotClaimableError())
createErrorFromNameLookup.set(
  'EscrowIsNotClaimable',
  () => new EscrowIsNotClaimableError()
)

/**
 * EscrowIsNotWithdrawable: 'Escrow is not able to withdraw'
 *
 * @category Errors
 * @category generated
 */
export class EscrowIsNotWithdrawableError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'EscrowIsNotWithdrawable'
  constructor() {
    super('Escrow is not able to withdraw')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowIsNotWithdrawableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new EscrowIsNotWithdrawableError())
createErrorFromNameLookup.set(
  'EscrowIsNotWithdrawable',
  () => new EscrowIsNotWithdrawableError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
