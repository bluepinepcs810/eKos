/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category DepositSol
 * @category generated
 */
export type DepositSolInstructionArgs = {
  solPotBump: number;
  orderId: beet.bignum;
  solAmount: beet.bignum;
  lockupTs: beet.bignum;
};
/**
 * @category Instructions
 * @category DepositSol
 * @category generated
 */
export const depositSolStruct = new beet.BeetArgsStruct<
  DepositSolInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['solPotBump', beet.u8],
    ['orderId', beet.u64],
    ['solAmount', beet.u64],
    ['lockupTs', beet.u64],
  ],
  'DepositSolInstructionArgs'
);
/**
 * Accounts required by the _depositSol_ instruction
 *
 * @property [_writable_, **signer**] escrow
 * @property [] escrowAuthority
 * @property [_writable_] solPot
 * @property [_writable_, **signer**] buyer
 * @property [] seller
 * @category Instructions
 * @category DepositSol
 * @category generated
 */
export type DepositSolInstructionAccounts = {
  escrow: web3.PublicKey;
  escrowAuthority: web3.PublicKey;
  solPot: web3.PublicKey;
  buyer: web3.PublicKey;
  seller: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const depositSolInstructionDiscriminator = [
  108, 81, 78, 117, 125, 155, 56, 200,
];

/**
 * Creates a _DepositSol_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositSol
 * @category generated
 */
export function createDepositSolInstruction(
  accounts: DepositSolInstructionAccounts,
  args: DepositSolInstructionArgs,
  programId = new web3.PublicKey('6PzCGqfvD4warUKFqyB2GUgdw3U4QM9dzrK7rkj9ooB9')
) {
  const [data] = depositSolStruct.serialize({
    instructionDiscriminator: depositSolInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.escrowAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.solPot,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.seller,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
